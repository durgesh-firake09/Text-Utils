{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","id","href","title","type","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","pasteText","a","navigator","clipboard","readText","rows","value","onChange","event","target","placeholder","style","display","flexWrap","newText","toUpperCase","toLowerCase","copyText","document","getElementById","select","writeText","showAlert","uploadMenu","innerText","summary","preview","action","color","accept","e","preventDefault","fileToLoad","files","fileReader","FileReader","onload","fileLoadedEvent","textFromFileLoaded","result","readAsText","error","endsWith","length","split","Alert","alert","role","heading","msg","App","setAlert","setMode","msgType","msgHeading","setTimeout","aboutTxt","body","classList","add","remove","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7c7df3a7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div className=\"border-bottom border-3\">\r\n      <nav\r\n        className={`navbar navbar-expand-lg navbar-${props.mode==='dark'?'dark':'light'} navbar-light`}\r\n        id=\"nav\"\r\n      >\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"/Text-Utils\">\r\n            {props.title}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className={`nav-link active border border-0 bg-${props.mode==='dark'?'dark':'white'}`} href=\"/Text-Utils\" aria-current=\"page\">\r\n                  Home\r\n                </a>\r\n              </li>\r\n            </ul>\r\n            <div className=\"form-check form-switch\">\r\n              <input\r\n                className=\"form-check-input\"\r\n                type=\"checkbox\"\r\n                id=\"flexSwitchCheckDefault\"\r\n                onClick={props.toggleMode}\r\n              />\r\n              <label\r\n                className={`form-check-label text-${\r\n                  props.mode === \"dark\" ? \"light\" : \"dark\"\r\n                }`}\r\n                htmlFor=\"flexSwitchCheckDefault\"\r\n              >\r\n                {props.mode === \"dark\"\r\n                  ? \"Enable Light Mode\"\r\n                  : \"Enable Dark Mode\"}\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const [text, setText] = useState(\"\");\r\n\r\n  const handlingUpBtn = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n  };\r\n\r\n  const handlingLoBtn = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n  };\r\n\r\n  const clearText = () => {\r\n    setText(\"\");\r\n  };\r\n\r\n  const handlingOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const copyText = () => {\r\n    let copyText = document.getElementById(\"text\");\r\n    copyText.select();\r\n    navigator.clipboard.writeText(copyText.value);\r\n    props.showAlert(\"success\", \"Success\", \" Text Copied to Clipboard\");\r\n  };\r\n\r\n  const pasteText = async () => {\r\n    let text = await navigator.clipboard.readText();\r\n    setText(text);\r\n  };\r\n\r\n  const fileUpload = () => {\r\n    let uploadMenu = document.getElementById(\"fileUpload\");\r\n    if (uploadMenu.style.display === \"none\") {\r\n      uploadMenu.style.display = \"block\";\r\n      document.getElementById(\"uploadTxt\").innerText = \"Cancel Upload\";\r\n    } else if (uploadMenu.style.display === \"block\") {\r\n      uploadMenu.style.display = \"none\";\r\n      document.getElementById(\"uploadTxt\").innerText = \"Upload a .txt file\";\r\n    }\r\n  };\r\n\r\n  const readFile = (e) => {\r\n    e.preventDefault();\r\n    let fileToLoad = document.getElementById(\"formFile\").files[0];\r\n\r\n    let fileReader = new FileReader();\r\n    fileReader.onload = function (fileLoadedEvent) {\r\n      let textFromFileLoaded = fileLoadedEvent.target.result;\r\n      setText(textFromFileLoaded);\r\n    };\r\n    try {\r\n      fileReader.readAsText(fileToLoad, \"UTF-8\");\r\n      props.showAlert(\"success\", \"Success\", \"File Uploaded Successfully.\");\r\n    } catch (error) {\r\n      props.showAlert(\r\n        \"danger\",\r\n        \"No File Selected\",\r\n        \" Please Select a valid .txt file to open.\"\r\n      );\r\n    }\r\n  };\r\n\r\n  const viewSummary = () => {\r\n    let summary = document.getElementById(\"summary\");\r\n    if (summary.style.display === \"none\") {\r\n      summary.style.display = \"block\";\r\n      document.getElementById(\"summaryBtn\").innerText = \"Close The Summary\";\r\n      document.getElementById(\"secHr\").style.display = \"block\";\r\n    } else if (summary.style.display === \"block\") {\r\n      summary.style.display = \"none\";\r\n      document.getElementById(\"summaryBtn\").innerText = \"View Full Summary\";\r\n      document.getElementById(\"secHr\").style.display = \"none\";\r\n    }\r\n  };\r\n\r\n  const preView = () => {\r\n    let preview = document.getElementById(\"preview\");\r\n    if (preview.style.display === \"none\") {\r\n      preview.style.display = \"block\";\r\n      document.getElementById(\"previewBtn\").innerText = \"Close The Preview\";\r\n    } else if (preview.style.display === \"block\") {\r\n      preview.style.display = \"none\";\r\n      document.getElementById(\"previewBtn\").innerText = \"Preview Text\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`container my-3 text-${\r\n        props.mode === \"dark\" ? \"light\" : \"dark\"\r\n      }`}\r\n    >\r\n      <h1>Enter The Text to Analyse</h1>\r\n      <hr />\r\n      <div className=\"mb-3\">\r\n        <textarea\r\n          className={`form-control text-${\r\n            props.mode === \"dark\" ? \"light\" : \"dark\"\r\n          } bg-${props.mode === \"dark\" ? \"dark\" : \"light\"}`}\r\n          id=\"text\"\r\n          rows=\"8\"\r\n          value={text}\r\n          onChange={handlingOnChange}\r\n          placeholder=\"Enter Text Here...\"\r\n        ></textarea>\r\n      </div>\r\n      <div className=\"container\" style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n        <button\r\n          className={`btn btn-${\r\n            props.mode === \"dark\" ? \"secondary\" : \"primary\"\r\n          } m-1`}\r\n          onClick={handlingUpBtn}\r\n        >\r\n          Convert To Uppercase\r\n        </button>\r\n        <button\r\n          className={`btn btn-${\r\n            props.mode === \"dark\" ? \"secondary\" : \"primary\"\r\n          } m-1`}\r\n          onClick={handlingLoBtn}\r\n        >\r\n          Convert To Lowercase\r\n        </button>\r\n        <button\r\n          className={`btn btn-${\r\n            props.mode === \"dark\" ? \"secondary\" : \"primary\"\r\n          } m-1`}\r\n          onClick={clearText}\r\n        >\r\n          Clear\r\n        </button>\r\n        <button\r\n          className={`btn btn-${\r\n            props.mode === \"dark\" ? \"secondary\" : \"primary\"\r\n          } m-1`}\r\n          onClick={copyText}\r\n        >\r\n          Copy To Clipboard\r\n        </button>\r\n        <button\r\n          className={`btn btn-${\r\n            props.mode === \"dark\" ? \"secondary\" : \"primary\"\r\n          } m-1`}\r\n          onClick={pasteText}\r\n        >\r\n          Paste From Clipboard\r\n        </button>\r\n        <button\r\n          className={`btn btn-${\r\n            props.mode === \"dark\" ? \"secondary\" : \"primary\"\r\n          } m-1`}\r\n          id=\"uploadTxt\"\r\n          onClick={fileUpload}\r\n        >\r\n          Upload a .txt file\r\n        </button>\r\n        <button\r\n          className={`btn btn-${\r\n            props.mode === \"dark\" ? \"secondary\" : \"primary\"\r\n          } m-1`}\r\n          id=\"summaryBtn\"\r\n          onClick={viewSummary}\r\n        >\r\n          View Full Summary\r\n        </button>\r\n        <button\r\n          className={`btn btn-${\r\n            props.mode === \"dark\" ? \"secondary\" : \"primary\"\r\n          } m-1`}\r\n          id=\"previewBtn\"\r\n          onClick={preView}\r\n        >\r\n          Preview Text\r\n        </button>\r\n      </div>\r\n\r\n      <form\r\n        className=\"border border-2 rounded-4 rounded-3 rounded-3 my-3 p-3\"\r\n        action=\"/\"\r\n        style={{ display: \"none\" }}\r\n        id=\"fileUpload\"\r\n      >\r\n        <div>\r\n          <label htmlFor=\"formFile\" className=\"form-label\">\r\n            <h5>Upload a .txt File</h5>\r\n          </label>\r\n          <input\r\n            className={`form-control bg-${\r\n              props.mode === \"dark\" ? \"dark\" : \"light\"\r\n            }`}\r\n            style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}\r\n            type=\"file\"\r\n            accept=\"text/plain\"\r\n            id=\"formFile\"\r\n          />\r\n        </div>\r\n        <button\r\n          className={`btn btn-${\r\n            props.mode === \"dark\" ? \"secondary\" : \"primary\"\r\n          } mt-3`}\r\n          onClick={readFile}\r\n        >\r\n          Upload File\r\n        </button>\r\n      </form>\r\n      <hr id=\"firstHr\" />\r\n      <div\r\n        className=\"container border border-2 rounded-4 rounded-3 rounded-3\"\r\n        style={{ display: \"none\" }}\r\n        id=\"summary\"\r\n      >\r\n        <h3>Summary of The Text</h3>\r\n        <hr />\r\n        <p>\r\n          Total Words :{\" \"}\r\n          {text.endsWith(\" \") || text.length === 0\r\n            ? text.split(\" \").length - 1\r\n            : text.split(\" \").length}\r\n        </p>\r\n        <p>Total Characters : {text.length}</p>\r\n      </div>\r\n      <div>\r\n        <hr id=\"secHr\" style={{ display: \"none\" }} />\r\n      </div>\r\n      <div\r\n        className=\"container border border-2 rounded-4 rounded-3 rounded-3 my-3\"\r\n        id=\"preview\"\r\n        style={{ display: \"none\" }}\r\n      >\r\n        <h4 className=\"my-2\">Preview of text</h4>\r\n        <hr />\r\n        <div\r\n          id=\"previewText\"\r\n          style={{ color: props.mode === \"dark\" ? \"red\" : \"blue\" }}\r\n        >\r\n          <p>\r\n            {text.length === 0\r\n              ? \"Enter Text in textbox above to see Preview of text here...\"\r\n              : text}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  return (\r\n    props.alert && (\r\n      <div className=\"container my-3\">\r\n        <div\r\n          className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n          role=\"alert\"\r\n        >\r\n          <strong>{props.alert.heading} : </strong> {props.alert.msg}\r\n        </div>\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import \"./App.css\";\nimport React, { useState } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport Alert from \"./components/Alert\";\n\nfunction App() {\n  const [alert, setAlert] = useState(null);\n  const [mode, setMode] = useState(\"light\");\n\n  const showAlert = (msgType, msgHeading, msg) => {\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n    setAlert({\n      type: msgType,\n      heading: msgHeading,\n      msg: msg,\n    });\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      document.body.classList.add(\"bg-dark\");\n      setMode(\"dark\");\n      showAlert(\"secondary\", \"Mode Changed\", \"Dark Mode Enabled\");\n    } else if (mode === \"dark\") {\n      document.body.classList.remove(\"bg-dark\");\n      setMode(\"light\");\n      showAlert(\"success\", \"Mode Changed\", \"Light Mode Enabled\");\n    }\n  };\n\n  return (\n    <>\n      <Navbar\n        title=\"Text Utils\"\n        aboutTxt=\"About\"\n        showAlert={showAlert}\n        mode={mode}\n        toggleMode={toggleMode}\n      ></Navbar>\n      <Alert alert={alert} />\n      <TextForm\n        showAlert={showAlert}\n        mode={mode}\n      ></TextForm>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}